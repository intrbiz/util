package com.intrbiz.crypto.cookie;

import static com.intrbiz.util.Hash.*;

import java.io.IOException;
import java.nio.ByteBuffer;
import java.security.SecureRandom;
import java.util.Arrays;

import org.apache.commons.codec.binary.Base64;

import com.intrbiz.crypto.SecretKey;
import com.intrbiz.util.VarLen;

/**
 * <p>
 * A CryptoCookie is a cryptographically signed 
 * token with additional metadata.  This allows 
 * for the stateless verification of tokens.
 * </p>
 * <p>
 * You should use a CookieBaker to bake CryptoCookies
 * </p>
 */
public class CryptoCookie
{   
    public static final byte[][] OBFUSCATION_KEY = { 
        { 43, 45, -80, 127, 13, -92, -19, 54, -14, -90, 18, 110, -50, -116, 110, 124, -110, 122, 103, 13, -42, -125, 123, -70, -111, 69, 85, 5, 60, 32, -74, -22, 44, -82, 20, 46, 22, -97, -90, 84, 15, -39, 22, -21, 19, -21, -59, -28, 114, -62, -43, -38, -66, 70, 106, 98, -20, -10, 17, -41, -74, -116, -26, -13, -67, -103, 65, -106, 95, -25, -117, 7, -16, 111, 111, -87, -99, 36, -107, 65, -55, -118, -68, 36, 103, -31, -4, 61, 40, -127, -18, -14, -90, 57, 127, -6, -19, 43, 18, 55, -27, 64, -113, 39, -76, 19, 3, 16, -57, 6, 93, 0, 90, -84, 13, -93, 65, -53, -4, -80, 93, 12, -86, 68, 74, -49, -95, 18 }, 
        { -22, 114, -126, -91, 44, 80, 11, -78, -59, -74, 105, 87, -93, 71, 20, 69, -96, -24, -6, 48, 82, 109, -85, -71, -20, 9, 125, 54, -27, -15, 66, 101, 82, 12, -24, -80, -14, 103, 91, 73, 100, 72, 85, -45, -96, -26, 12, 108, -41, -33, -5, -10, 115, -88, 53, 95, -102, -117, -94, -114, -83, 37, 109, -28, -17, 65, -17, 10, 89, 88, -10, -21, 69, -72, 39, -12, -51, 41, -109, -116, -128, 91, 22, 40, 102, 107, 92, -84, 109, -39, 60, -29, 94, 99, -76, 74, -7, -50, -119, 124, -20, -82, -29, 43, -95, 98, -101, 54, 108, 88, -115, -59, -22, -79, 98, -46, 23, 78, 74, -15, 32, -44, -22, 103, 9, -123, 21, 98 }, 
        { -122, 44, 85, 109, 52, 66, 71, -110, -58, 100, 39, 37, -23, 57, -41, 121, 85, -119, 19, 7, 19, -1, 32, -34, 88, 25, -16, 76, -21, -110, 37, -100, 64, -104, 28, 4, 10, -20, 96, -125, -24, 73, 10, -125, 74, -110, 79, -69, -120, 98, -68, -13, -100, -79, -117, -50, -71, 60, -30, -91, 17, -127, 34, 58, 5, 53, 119, 24, -97, 96, 24, -65, -17, -66, 55, 126, 106, -13, -51, -44, -116, -23, 5, -124, 117, -55, -28, 91, 125, -37, -96, 27, -45, -67, -123, -96, -107, 96, -74, -14, 44, 107, -113, -36, -56, 0, -47, -59, 48, 117, -63, 83, -59, -67, -63, -22, 38, -102, -113, 27, 75, -107, 87, 99, -12, 59, -80, 72 }, 
        { -18, -121, -106, -104, 115, -79, 88, 74, 48, 41, 14, 93, -108, 120, -66, -1, 90, 61, 109, -97, 111, 112, -48, -44, -28, -58, -10, -38, -29, -127, 65, 57, 91, -72, 67, -37, 17, -87, -2, -70, -30, -54, 6, 100, -20, -78, 8, 26, 19, 25, 21, -97, 34, -107, 17, -106, 71, 38, -26, 76, -65, 112, -62, -50, -78, -10, -127, -128, -125, 99, 52, 73, -93, -81, 95, 19, -24, -28, -21, 117, -47, -114, 125, 72, -76, 71, 27, 86, 24, 114, 119, -123, -104, -59, -99, 8, -36, 93, 20, -2, -52, -104, 115, -107, -75, -41, 96, 50, -69, 127, 69, 121, -97, -36, 82, 42, -49, -90, 4, -48, 117, -97, 103, 98, 4, -51, -21, 20 }, 
        { 27, 107, -14, -126, -5, 63, 115, 43, -84, -109, 78, -87, 6, -94, -79, -2, 121, 103, 30, -48, 14, 38, 48, -26, 4, -47, -119, -45, 69, 81, -25, 32, 19, -3, -89, 39, -56, 101, 58, -44, -98, 102, 20, -14, 117, 115, 93, 94, -51, 32, 7, -29, -105, 125, 14, 65, 69, 107, 6, -73, 110, 110, 17, 78, 72, 68, -93, -13, -95, 47, 8, 100, -91, -122, -78, 43, -63, 0, 11, 85, -1, 30, 25, 79, 31, 81, -34, -75, -56, -43, 10, -7, 70, 93, 110, -100, -46, -102, -60, -85, -19, 75, 63, -33, 21, -89, 55, -87, 23, -72, 27, -105, -99, 69, 49, -21, 80, 42, -5, -6, 93, -91, 117, 18, -28, -90, -111, 115 }, 
        { -84, 127, 19, -58, -58, 115, 21, -103, 63, -127, 28, -6, -118, -75, -69, 71, -54, 11, -101, 26, -118, 69, 106, 54, -122, -95, 73, 73, 108, -22, -79, 88, -73, -49, -86, -127, -94, 32, -1, -38, 31, -5, -126, -57, 116, -1, 5, -75, 51, -111, 39, 76, -94, -49, 58, -125, -85, -96, -70, -47, -119, 25, 68, -5, 55, -30, 67, -74, -97, -86, -33, -8, -7, 108, -122, 108, -127, -126, 46, -6, 36, -45, 48, 48, -101, 1, -60, -37, -88, 82, 41, -72, -24, 89, -117, -50, -123, 17, 0, -82, 112, 8, 55, 79, -74, 52, -3, 36, -15, 97, -108, -118, 32, 64, -14, 124, -102, -5, 18, -53, -75, -104, -14, 125, 2, -17, 60, 38 }, 
        { 15, 60, -9, -78, 79, -107, -43, -92, -63, -10, 42, -13, 110, 22, -115, -58, -18, 126, 120, 21, 46, 101, -127, 20, -26, 100, -90, 116, -67, -56, -99, -78, 105, 28, 109, 83, 30, -52, -63, 2, -97, -8, -94, -60, 39, 42, -98, -104, -97, 104, -78, -94, 32, 63, 59, 47, 125, 56, 109, 1, -66, 66, 0, 121, -127, -64, 46, 5, 39, -116, 14, 18, 105, -66, 101, -114, -54, 38, -89, -55, 51, 48, -17, 98, 75, 15, -65, -14, -60, -95, 4, -125, 33, 62, -47, -47, 42, 91, -97, 58, -55, -124, -115, 21, -44, -112, -95, -9, -46, -85, 77, -36, -121, -44, -77, -57, -98, 10, 30, -48, 84, -40, 69, 7, 91, -103, -63, -103 }, 
        { -23, 37, -73, 34, -59, 17, -124, 109, 48, 104, 120, 47, 70, -90, -2, 77, 117, 111, 80, 49, -67, -120, -95, -118, 27, -78, -83, -117, -12, 20, 39, 51, 106, 18, 20, 88, -28, 23, -45, -121, 114, 51, -36, 40, 12, -88, -40, 103, 45, 102, -86, 13, -109, -93, -17, -4, -63, -35, -62, -71, -7, 28, -34, -50, 67, -49, -79, 34, -59, 27, -97, -15, 78, 90, 38, 57, -102, -116, 18, -90, -98, 101, -74, -93, 101, -39, 108, 57, -36, -96, 43, 95, 106, -72, -124, -94, 101, -53, 125, 16, -18, -78, 96, 87, 10, 21, -29, 88, 19, -83, -26, 120, -115, -86, 6, 48, 37, -22, 21, -52, -69, -122, 93, -83, 77, -101, 88, 82 }, 
        { 23, -67, -43, 50, 27, -25, -54, 17, 31, 107, -38, -110, -45, 80, -42, -72, -54, -78, -10, 60, -34, -125, 125, -33, 6, 47, -122, -21, -97, -87, 71, 1, 118, 70, -23, 105, 83, 82, -48, 37, -28, 23, 9, -4, 30, -37, 71, 110, -124, -126, 8, -45, -25, -30, 85, -74, -1, -8, -60, 2, -56, -121, 87, 20, -127, 67, 90, 91, 0, -6, 82, -61, 61, -31, -78, -30, -72, 123, -49, -49, -79, 120, -78, 97, -48, -7, 28, 43, 115, -55, -59, 45, -32, 103, 96, -77, 53, -34, -83, 28, 64, 63, 48, -35, -98, 80, 105, 58, 55, 30, 51, 90, 48, 50, 11, 111, 104, 57, 62, 94, -128, 64, -29, -96, -61, 19, 55, -116 }, 
        { -113, -42, 106, 26, 99, -107, 24, 123, 116, -76, 110, 52, 54, 91, 125, -113, 43, -121, 117, -46, 34, 76, 110, -6, -11, -19, -98, -37, -55, 103, -81, 57, -39, -104, -105, -24, 66, 13, 94, 96, -102, 15, -73, -18, 46, -84, -9, 84, 29, -124, 108, -17, -1, -125, -98, 16, -123, 66, 117, -64, 16, 38, -48, -106, -67, 77, -84, 40, -32, -122, 70, -29, -65, 90, 51, 35, -1, 114, 112, -52, 103, -63, -116, 100, -46, -112, 20, 103, -18, 93, -61, 25, 33, -72, -12, 92, 83, 1, 84, 101, -79, -87, -51, 83, -20, 88, -34, -25, -110, 62, -37, 28, 21, -23, -75, -15, -111, 51, 34, 9, 109, -76, 1, -113, 121, 95, -30, 40 }, 
        { 40, -82, -57, 49, 102, 0, -95, 49, -77, -77, 107, -30, -102, -13, 16, 11, -124, -75, -48, 109, 123, -58, 0, -24, -64, 94, 101, -92, -85, -24, -69, 87, 83, -115, -60, -43, -68, 112, 125, 122, 54, -101, -68, -65, 4, -61, -92, -127, 101, 9, 77, 20, -76, -41, 58, 23, 80, 60, -72, 66, 5, -19, -54, -42, -54, -27, -92, -18, 96, -91, -87, -36, -41, -18, 101, 100, -31, 103, -58, 63, 111, 87, -11, -56, 76, 110, -30, 6, -60, -10, 58, -47, 14, -117, -100, 77, -59, 123, 71, -99, 121, 73, 95, 12, -99, 51, -35, 21, 38, 97, -32, 53, 100, 28, -117, -57, 27, 29, 57, -109, -96, 86, 38, 114, 41, -64, -42, -72 }, 
        { -2, -81, -44, 94, 40, 117, -107, -13, -89, -1, -84, 31, -26, 46, -51, 21, -52, 99, 46, -69, -49, -117, 68, -69, 40, -117, -24, -118, 77, -126, 0, -92, 72, 9, 13, -101, 15, -121, -9, -25, -57, -119, -70, 70, 72, 51, -77, -90, -92, 4, -109, 95, 99, 36, -1, -93, -29, 60, 79, 76, 1, 108, 45, 6, 77, -87, 122, -23, 88, 17, 112, -37, 85, 127, 47, -73, 3, 90, 22, -4, -72, -80, 71, -89, -120, 112, 70, 21, -25, 125, 86, -110, -4, -58, 102, 104, -3, -70, -72, 45, -52, -12, -116, 28, -18, 75, 77, -126, -69, -11, 80, 105, -36, -71, -107, -77, 12, 22, 20, -54, -72, -79, -16, 34, -87, 119, -4, 38 }, 
        { 75, 16, 5, 24, 61, -16, -112, 105, 52, 68, 37, -46, 68, -88, -11, -75, 55, -7, 18, -83, -55, 114, -97, -22, -62, -113, 93, 13, -124, -29, -36, 26, 125, 113, -3, -9, 49, -64, -107, -1, 73, 37, -56, 42, -6, 123, -101, -29, -115, 52, -1, -46, 6, 123, 18, -77, 105, -21, -29, -95, -53, 12, -95, 101, -39, -36, 26, -77, 34, -92, 72, 27, 11, -85, -47, -24, -90, 0, 103, 61, -33, 85, -107, 21, 19, 75, -102, -119, -79, -18, -23, -92, -13, 115, -76, 114, -74, -42, -61, -49, 34, -60, 46, 46, 46, -108, -120, 16, -83, 80, -79, 29, -48, -88, -109, 3, 123, 7, -92, 98, 114, 44, 124, 118, 115, -71, 91, -21 }, 
        { -107, 21, 1, -44, 57, -89, 118, 105, -107, -17, -32, 63, 57, -59, 109, -63, 61, -86, -127, 53, 103, 64, 86, -118, -22, -82, 42, 114, -49, 47, 12, -114, 105, 32, -121, -97, -104, -19, -103, 109, -22, -100, -127, 32, -106, -109, 124, -2, -123, -12, -88, 3, 17, 35, -82, 95, -73, -35, 53, -85, -32, -92, 79, 66, -26, -21, 32, -52, -116, 41, 101, -31, -93, 26, 75, -70, -28, -33, 28, -102, 86, -122, 77, -110, 123, 50, 22, -100, -43, 24, -10, 91, 104, 11, -116, 83, -65, -101, 112, 73, -29, -120, 16, -61, 44, -81, 70, -59, -39, 85, -22, 36, -10, 84, 13, -64, -126, -47, -88, 78, 28, -8, -96, 81, 10, -60, 69, 31 }, 
        { -108, -3, -87, 88, 3, 10, 107, -115, -90, 66, 83, -84, 90, -10, 56, 41, 94, 7, -3, 120, 56, -11, -15, -100, -103, -52, -21, -61, -65, -105, -14, -43, 14, 21, 46, -40, -3, -51, 81, -121, -82, 64, -62, -60, 113, -96, -2, 83, 6, 89, 90, 117, -71, 107, 116, -109, -51, 55, -63, -126, -25, 55, -110, -42, -13, -99, 114, -83, -125, -13, 122, 39, -119, 66, -106, -11, 118, 67, -26, 80, -118, -57, -19, 39, 46, -42, -112, -58, 55, 23, 57, 57, 35, -79, 74, 66, -29, -20, 55, 36, 102, -49, -31, -69, -87, -42, 39, -2, 107, 3, 54, -35, 86, 118, -4, 61, -70, -50, 127, -77, -66, 44, -77, 110, 104, 18, 122, 86 }, 
        { 90, -101, 77, -41, -18, -8, -115, 74, 40, 81, 8, 64, 111, -55, 52, 24, 89, 117, -13, -2, 99, 32, -92, -48, -71, 108, -27, 102, 12, 17, 78, -122, -26, 25, -18, 117, 15, 0, 28, 26, -119, 46, 25, -53, 76, 11, 100, -4, 42, 32, 20, -101, -114, 100, -33, -105, -37, 50, -57, -14, -74, 68, 43, 99, -96, 78, 125, -33, 27, -57, 115, 22, -111, 114, -125, 6, -57, 101, -100, -43, 27, 122, 48, -40, -68, -125, -18, -38, 11, 10, -85, -30, 121, -124, -60, -44, 16, 5, -23, 120, -49, -37, 67, 69, 36, -93, 46, 59, -29, -85, 109, -124, -61, -67, -71, 54, -18, 44, 108, -93, 36, -67, 34, -55, 40, 123, 101, -49 }, 
        { 48, -125, 9, 82, 107, -17, -2, 8, -63, 73, -54, -121, 26, -30, -43, -103, -41, -83, 107, -91, 23, -112, -44, 27, -21, -12, 84, -6, -35, -41, -87, -31, -8, 50, -90, 16, 34, -59, 76, -67, 51, -57, 121, 124, -56, -37, -8, -12, 110, 61, -58, 83, 122, 19, 5, 120, 97, -120, -121, 0, 39, 0, -38, 82, 80, -113, 22, 51, 65, 113, -60, -79, 54, -2, 113, -25, -71, -5, 57, 84, -119, 122, 13, -75, -63, -99, -94, 49, -64, 91, 93, -79, 84, 30, 44, 122, -85, 112, 85, 111, -123, -127, -12, 118, -120, 72, -9, -95, -37, 14, 42, 19, 97, -107, -118, 43, 112, 46, 16, -4, -58, 125, 15, 78, 108, 110, 37, -93 }, 
        { 21, 95, 24, -93, -41, 89, 32, 80, -125, -117, 32, -32, -9, 67, -56, 86, 91, 16, -112, 117, -60, 84, -111, -90, 108, 43, 34, 16, 119, 102, -114, -95, -61, 65, 42, -5, 65, -42, -104, 18, 101, -20, 30, 127, -19, 107, -73, -115, 9, -29, 39, 46, -37, 124, 35, 82, 79, -117, 30, 80, -76, -88, 30, 80, 20, 76, 110, 98, 72, -38, 75, -81, 71, 8, -33, 127, -62, -42, 12, -52, 24, -31, 53, -33, -93, 110, -91, -32, 89, 42, 60, -54, 61, 60, -52, 15, 67, -90, 79, 24, -76, 122, -8, 59, 118, -31, -74, 99, -41, 37, -53, 56, -43, 105, 20, -107, 40, 83, -44, 47, -100, 8, -86, 0, -25, -10, -92, -65 }, 
        { -46, -87, -50, 14, 109, -107, 61, 121, -122, 74, 21, 67, 67, 8, 21, 101, -88, -123, 37, -49, 10, 1, 45, 117, -86, -123, 16, -91, 59, -79, -78, -6, 28, -71, 29, -104, -30, 67, 10, -8, 30, -24, 42, -126, 88, -52, -54, 118, -23, -56, 57, 105, -121, 6, -121, -70, -110, -14, -34, 67, -35, -123, 112, -67, 106, 18, 87, -88, -55, 42, -48, -93, 13, -44, -48, -50, 4, 14, 75, -25, -81, 98, 90, 26, -98, -96, -87, 67, 62, 44, -3, 92, -66, 66, -19, -94, -12, -69, 2, 124, -76, -14, 117, 23, 55, -59, 27, 52, -83, -53, 61, 103, 82, 52, 101, 40, -95, -108, 114, -92, 39, 102, 104, -16, -36, -102, -48, 89 }, 
        { 18, 0, -43, -87, 4, -25, 118, -40, -49, 31, -25, -42, 72, 30, 35, -83, 67, 16, 10, 117, -94, 110, 83, 1, -22, 115, -16, 37, 107, 95, -20, 60, 55, -78, 46, -5, 99, -70, 47, 100, -12, -104, -11, 88, 100, 0, 44, -68, 103, 18, -16, 111, 55, -69, -95, -63, 72, -27, -54, 37, 27, -47, -75, 111, 15, -128, -83, 74, 17, 86, 71, -45, 126, -122, 99, -20, 113, -127, -38, -40, 27, 13, 12, -126, 1, -4, -96, 29, -59, 103, 46, -8, 125, -86, 70, -40, 11, -65, -78, 15, 59, 5, -6, -124, -61, 60, -124, -108, -58, 41, -54, -47, 20, 10, -4, 81, -18, 32, 48, 56, -117, 54, 62, -5, 6, 95, 14, 69 }, 
        { -98, 32, -106, 123, -109, -76, -107, -98, -64, 51, 40, -69, 14, -80, 103, -121, -11, 4, -71, 29, -10, 43, 113, -112, 26, 56, 7, 74, 125, -36, 104, -75, 43, 121, -38, -124, -126, 17, -81, -89, -63, 93, -48, 59, 26, -26, -87, -12, -106, -120, 28, -40, 24, 106, 91, -88, 8, -63, -94, 76, -87, 93, -35, -44, 105, 15, 29, 73, 82, 20, 63, 65, -126, -9, 99, 37, -121, -67, 127, 19, 119, -13, 119, 77, 125, 20, 53, 117, 81, 45, 45, -76, 58, 122, -3, -53, 84, 79, 31, 74, 44, -112, -95, -64, 68, 98, -76, 12, 125, 47, -65, 122, -72, -87, 91, -89, -90, 56, -115, -26, 0, -41, -93, -65, -1, 63, 66, -128 }, 
        { -52, 109, -113, -26, -72, -19, -86, -26, 95, 8, -85, 54, 25, -49, -18, 21, -32, -82, 68, -110, -89, -79, -72, 52, -114, 20, -5, -33, 113, 87, -17, -98, -95, -64, 45, -10, 70, -41, 74, 16, -46, 17, -101, 43, -119, -60, -49, -104, 56, -89, 7, -110, -59, 109, -2, 99, 35, 15, 9, 34, 68, 39, -3, 32, 114, 53, 69, -18, 47, 48, 118, -30, -14, -42, 82, -123, -35, -49, 29, 78, 9, 36, 92, 71, -121, -87, -6, -9, -41, -73, -20, -57, 94, 91, 101, 93, 68, 93, 3, 7, 5, -6, -12, -106, -33, 47, 76, -2, -36, 106, -124, -32, -124, 8, -87, 25, -104, -8, 82, -8, -5, 31, 72, 9, -48, 102, 22, 91 }, 
        { -66, -105, -4, -26, 88, 10, -25, 108, -32, -21, 38, -125, 125, -70, 27, 87, -2, -18, -38, -121, -43, 78, 4, -123, -65, 86, 22, 1, -42, 121, -127, -87, 9, -21, -67, 61, 27, 4, 42, 109, -29, 34, 50, 86, 70, -13, -103, -79, -32, -73, -9, -125, 75, -1, 88, 3, -75, -36, 121, 9, 19, 40, 15, 7, -82, 77, 1, -52, -100, -71, -86, 48, -73, -81, 62, -51, 58, 23, 91, 68, 102, 44, 9, -14, 62, 113, -32, 121, -121, 32, 25, 5, 71, 56, -97, 117, 121, -113, -2, -116, 29, -5, -83, 125, 101, -45, 61, -46, 110, -13, -23, -104, 90, -34, 49, -118, -24, 12, 72, 25, -93, 23, 107, -39, 74, -63, -15, 5 }, 
        { 19, -105, 34, 94, 41, 86, 80, 99, 80, -112, -97, -2, 70, -73, -112, -14, -94, 59, -16, 15, 31, 70, 102, 97, 115, 11, -23, -68, -20, -123, -83, 101, -104, 105, -124, 99, -121, -60, -28, -7, -28, 4, -20, -44, -43, 43, -72, 52, -91, 80, -47, 96, -38, -20, -84, 75, -34, -128, -74, -126, -39, 36, -123, -95, 27, -93, -30, -72, -74, -14, -95, 40, -28, 55, -37, -5, 122, -74, -17, 14, 122, -104, 60, 124, -75, -76, -7, -57, -61, -91, -112, -4, 29, -60, -128, 125, -90, -34, 4, 17, 76, -127, 17, 91, -88, 5, 100, 41, 94, -62, 14, 14, -67, -93, 99, 97, 120, -46, -75, -83, -47, -31, -43, -123, -94, -41, 127, 74 }, 
        { 63, 28, 71, -52, 18, -124, 35, 56, -100, 27, 19, 64, 14, 97, 47, -82, 57, 18, 17, -19, 110, 46, -75, -38, 13, 103, -32, 73, 108, 14, -78, 102, 71, 108, 34, -28, -17, 81, -68, 58, 26, 54, 34, 57, 39, 50, 32, -30, 87, -29, -98, -82, 73, 8, -127, -116, -105, -51, 97, -58, 30, -119, 22, 8, -81, -19, -126, -30, -13, -35, -30, -29, -112, -103, -16, 37, 103, -3, -10, 9, 43, 123, 57, -84, 70, 41, -121, 90, 123, -51, -67, 15, -92, 117, 83, -70, 125, 25, 35, -127, 49, 125, 101, -109, -30, 43, -14, -125, -120, 118, 101, -21, -93, -39, 73, 26, 75, -8, -98, 86, 91, 57, 25, 8, -117, -72, -15, 103 }, 
        { -41, -54, -111, 118, -128, -50, 84, -124, 17, -7, -86, 105, -51, 0, 108, 108, -64, -6, -16, 6, 114, 7, 58, 103, 98, -70, 104, 27, -36, 127, -124, 70, -44, 26, -104, 87, 19, 29, -75, -20, 4, 38, -2, -125, 115, 68, 69, -119, -3, -66, -27, -63, 101, -123, -127, 22, 33, 101, -42, 54, -8, -35, -63, -9, -86, 108, -11, 66, 49, 123, -124, -5, 66, 91, -79, -66, -39, -72, -109, -92, 49, -94, -69, -16, 21, -99, 61, -76, -77, 81, -97, -78, -89, -26, -44, 11, 45, 37, -41, -87, -125, -86, 72, 90, -45, -118, 46, -6, -85, -108, -125, 89, 47, 100, 122, -35, 43, 72, -8, 28, -11, 119, 39, -120, -107, -14, 4, -121 }, 
        { -35, 49, 40, 0, 52, -27, 2, -92, 110, -14, 90, 97, -60, 29, 30, -100, -98, -55, -51, -4, -50, 73, 88, 100, 71, 21, 127, 7, -81, 93, -112, -17, 80, -85, 51, -18, -20, 44, 62, 126, 65, -82, 2, 15, 95, 110, 89, 4, 88, 97, -81, 37, -82, -55, 27, 45, -84, -38, 61, -24, -77, -62, -22, 44, 22, 120, -119, 108, 94, -121, -66, 115, -67, -111, -117, 125, -122, -23, 93, 41, 96, 16, 24, -128, 102, 106, -45, -116, -30, -37, -72, 91, 45, -20, 71, 38, 117, -76, -94, 17, -125, -53, 25, 29, 105, -81, -14, 118, -7, 38, -59, -56, 94, -88, -66, -105, -35, 0, 96, 104, 111, -114, 17, 11, -34, 46, 87, 56 }, 
        { 93, 60, -74, -109, 36, 51, -41, 43, 109, 68, 89, 20, 60, -5, -95, 106, -66, 48, 27, -15, -107, 38, -66, -69, 45, 95, -3, -14, 53, 79, -88, -76, 54, -107, -31, -67, 34, -49, 2, -38, -128, 118, -95, 3, 77, 90, 84, -50, 83, 55, -128, -57, -48, -36, -32, 103, 47, 85, -53, 85, -103, 28, 124, 36, -59, -107, 96, 48, -115, 42, -77, 67, -101, 18, 102, 87, 65, -98, -52, -43, -81, -115, 12, 65, 72, 6, 111, -22, 12, -82, -97, 35, -111, 54, -103, 10, -70, -49, 116, -21, -22, -42, -40, 0, -81, 11, 96, -50, 38, -80, 61, 22, 107, 35, 34, -74, -25, -70, 82, 116, 110, -86, -32, 98, 115, 55, -30, -75 }, 
        { 46, -85, 16, -23, -11, 78, 52, -60, 14, 33, 50, -22, 40, -54, -85, -88, 99, 32, 92, -17, -23, -121, 62, -107, 29, 46, -65, 70, -85, 63, 18, 40, 119, 126, -48, -31, -97, -110, -35, 68, -120, 0, -12, -64, -63, -78, -78, -88, 106, -37, -92, 69, 99, -26, 94, 24, 105, 38, 49, 52, -8, -73, -43, -3, 116, -121, -71, -81, -53, -11, 116, -4, 3, -63, 19, 112, -85, 118, -21, 86, -51, 123, -80, -51, 4, -54, 28, 126, 79, -101, 17, 80, -83, 65, -37, 95, 68, -86, 67, -58, 85, 106, -73, 102, -73, -50, -19, 2, -32, -21, -2, 61, -68, -120, -109, -77, -49, 5, -14, -106, -125, 2, -90, -8, -109, -89, 114, -23 }, 
        { -69, -100, 22, -41, -48, 80, 29, -28, 55, -69, 73, -116, -32, -74, -112, 24, 64, -120, -112, -53, -122, -11, 2, 115, 70, 11, -25, 81, -37, -20, -23, -50, 34, -115, 77, 45, 63, 102, 9, 65, 81, 95, -100, 126, -30, 101, 121, -124, 70, 85, 69, -43, -49, -103, -67, -104, -55, -51, -32, 95, 114, -25, 117, 127, 9, -84, -119, -66, -30, 62, -125, 54, 10, 106, -128, -6, -61, -106, 17, 101, 104, -22, 0, -16, -121, -105, -123, -42, -107, -2, 88, -77, 19, -20, 14, 49, 12, -34, -103, 60, 97, -22, -34, 3, 74, -73, -24, -80, 80, 30, 79, 124, -30, 108, 44, 40, 38, 86, 37, 52, -13, 65, 77, -99, -117, -84, -18, 79 }, 
        { -24, 126, -89, -62, 11, -78, 7, -78, 44, 87, 39, 95, -22, -36, 105, 31, 0, -124, -57, 58, -63, -19, 78, 52, 121, 113, 84, -47, -122, -35, -47, -31, 23, -104, 91, 98, -115, 60, -43, -29, 24, -12, -17, -34, 35, 106, -124, -47, 98, -57, -97, 94, -68, -101, -30, 34, 104, 87, 25, 97, -24, 64, 93, 78, 87, 119, -12, -87, 27, 28, -8, -95, -19, 78, 75, 10, 65, -69, -69, -40, 98, -86, -18, 0, 111, 70, 71, -102, -10, -77, -101, -77, -109, 49, 32, -33, -49, -27, 79, -97, 39, 73, 117, 3, 27, 118, -27, -5, 39, 126, -94, 43, 11, -88, 55, 56, 4, 42, 79, 53, -32, 95, 50, -87, -63, 84, -12, 48 }, 
        { 70, 42, 98, 125, -103, 29, -62, 39, -50, -98, -59, 44, -9, -83, 58, -63, 17, 9, 86, 103, 74, 122, -107, 38, 65, 115, -72, -2, 123, -42, -86, -78, -43, 38, -105, -113, 52, -75, -64, 108, -79, -75, -38, -97, 11, -86, 92, -73, 74, 47, -91, 24, -18, -26, -8, -86, -94, -55, 62, 45, 37, 69, -18, 12, 11, 3, 11, 11, -45, 10, -75, 73, 11, -87, 91, 62, 23, 116, 97, 108, 19, 14, 112, -41, -109, -27, 66, -123, 59, 73, -102, -102, 116, -81, -75, -56, 20, -39, 115, -1, -120, 42, -3, 102, 64, -112, -33, 119, 21, -6, -50, 39, 56, 49, 67, 11, -36, -84, 103, -92, 14, -73, 44, 18, 41, 3, -85, -79 } 
    };
    
    private final byte[] token;

    private final long expiryTime;
    
    private final int rebaked;

    private final long flags;
    
    private final int obfuscationKey;

    private byte[] signatue;

    public CryptoCookie(long expiryTime, int rebaked, long flags, byte[] token, int obfuscationKey)
    {
        super();
        if (token == null) token = new byte[0];
        this.expiryTime = expiryTime;
        this.rebaked = rebaked;
        this.flags = flags;
        this.token = token;
        this.obfuscationKey = obfuscationKey;
    }

    public CryptoCookie(long expiryTime, int rebaked, long flags, byte[] token, int obfuscationKey, byte[] signature)
    {
        this(expiryTime, rebaked, flags, token, obfuscationKey);
        this.signatue = signature;
    }
    
    public CryptoCookie(long expiryTime, long flags, byte[] token, int obfuscationKey, byte[] signature)
    {
        this(expiryTime, 0, flags, token, obfuscationKey);
        this.signatue = signature;
    }
    
    public CryptoCookie(long expiryTime, long flags, byte[] token, int obfuscationKey)
    {
        this(expiryTime, 0, flags, token, obfuscationKey);
    }

    /**
     * The token
     */
    public byte[] getToken()
    {
        return token;
    }

    /**
     * When does this cookie expire (in System.currentTimeMillis())
     */
    public long getExpiryTime()
    {
        return expiryTime;
    }
    
    /**
     * How many times was this cookie rebaked
     */
    public int getRebaked()
    {
        return this.rebaked;
    }

    /**
     * Has the cookie expired?
     * 
     * The cookie expires if the encoded expiry time is before the current system time (in Unix time).
     * 
     * A cookie with a negative expiry time never expires.
     * 
     * Note:
     *   isActive() != isExpired()
     */
    public boolean isExpired()
    {
        return this.expiryTime < System.currentTimeMillis() && this.expiryTime >= 0;
    }
    
    /**
     * Is the cookie still active?
     * 
     * The cookie is active if the encoded expiry time is after the current system time (in Unix time).
     * 
     * A cookie with a negative expiry time is always active
     * 
     * Note:
     *   isActive() != isExpired()
     */
    public boolean isActive()
    {
        return this.expiryTime < 0 || this.expiryTime >= System.currentTimeMillis();
    }

    /**
     * Flags
     */
    public long getFlags()
    {
        return flags;
    }

    /**
     * Is the given flag set
     * @param flag the flag to test for
     * @return true if the flag is set
     */
    public boolean isFlagSet(Flag flag)
    {
        return (this.flags & flag.mask) != 0;
    }

    /**
     * Are all the given flags set
     * @param flags the flags to test for
     * @return true if all flags are set
     */
    public boolean isFlagsSet(Flag... flags)
    {
        for (Flag flag : flags)
        {
            if (!this.isFlagSet(flag)) return false;
        }
        return true;
    }

    /**
     * Get the signature
     */
    public byte[] getSignatue()
    {
        return signatue;
    }

    //

    /**
     * Sign this cookie with the given key
     * @param key - the key to sign with
     */
    public void sign(SecretKey key)
    {
        if (this.signatue == null)
        {
            this.signatue = sha256(this.packData(), key.asBytes());
        }
    }

    /**
     * Verify that this cookie was signed by the given key
     * @param key - the key to verify against
     * @return
     */
    public boolean verifySignature(SecretKey key)
    {
        byte[] sig = sha256(this.packData(), key.asBytes());
        return Arrays.equals(this.signatue, sig);
    }
    
    /**
     * Verify that this cookie was signed by the given key and that this cookie is active
     * 
     * This is the same as:
     *   cookie.verifySignature(key) && cookie.isActive();
     * 
     * @param key - the key to verify against
     * @return
     */
    public boolean verify(SecretKey key)
    {
        return this.verifySignature(key) && this.isActive();
    }

    /**
     * Serialise this CryptoCookie to its bianry form
     * @return
     */
    public byte[] toBytes()
    {
        // Layout: data + signature
        byte[] data = this.packData();
        ByteBuffer buffer = ByteBuffer.allocate(data.length + (this.signatue == null ? 0 : this.signatue.length));
        buffer.put(data);
        if (this.signatue != null) buffer.put(this.signatue);
        buffer.flip();
        byte[] cookie = new byte[buffer.limit()];
        buffer.get(cookie);
        // xor with the obfuscation key
        // this isn't for security but 
        // to improve the look of the output
        int index = (data[0] >> 3) & 0x1F;
        xor(cookie, OBFUSCATION_KEY[index]);
        return cookie;
    }
    
    /**
     * Serialise this CryptoCookie to a URL safe Base64 encoded form
     */
    public String toString()
    {
        return Base64.encodeBase64URLSafeString(this.toBytes());
    }

    /**
     * Decode a CryptoCookie from its binary form
     * @param data the binary form
     * @return the decoded CryptoCookie
     * @throws IOException if the serialised form is malformed
     */
    public static CryptoCookie fromBytes(byte[] data) throws IOException
    {
        try
        {
            // reverse the obfuscation
            int index = (data[0] >> 3) & 0x1F;
            xor(data, OBFUSCATION_KEY[index % OBFUSCATION_KEY.length]);
            // read
            ByteBuffer buffer = ByteBuffer.wrap(data);
            // read header
            int  version = buffer.get() & 0x7;
            if (version != 1) throw new IOException("Malformed CryptoCookie");
            long expiry  = VarLen.readInt64(buffer);
            int rebaked = VarLen.readInt32(buffer);
            long flags   = VarLen.readInt64(buffer);
            int tknLen   = VarLen.readInt32(buffer);
            // validate token length
            if (tknLen > buffer.remaining()) throw new IOException("Malformed CryptoCookie");
            if (tknLen < 0) throw new IOException("Malformed CryptoCookie");
            // compute signature length
            int sigLen = buffer.remaining() - tknLen;
            // validate signature length
            if (sigLen < 0) throw new IOException("Malformed CryptoCookie");
            if (sigLen == 0) throw new IOException("Unsigned CryptoCookie");
            // read token
            byte[] token = new byte[tknLen];
            buffer.get(token);
            // read signature
            byte[] sig = new byte[sigLen];
            buffer.get(sig);
            // create
            return new CryptoCookie(expiry, rebaked, flags, token, index, sig);
        }
        catch (IOException e)
        {
            throw e;
        }
        catch (Exception e)
        {
            throw new IOException("Malformed CryptoCookie", e);
        }
    }
    
    /**
     * Decode a CryptoCookie from its Base64 encoded string representation
     * @param data the Base64 encoded string format of the cookie
     * @return the decoded CryptoCookie
     * @throws IOException if the serialised form is malformed
     */
    public static CryptoCookie fromString(String data) throws IOException
    {
        return fromBytes(Base64.decodeBase64(data));
    }


    private byte[] packData()
    {
        // Layout: varLen64(expiry) + varLen32(rebaked) + varLen64(flags) + varLen32(token.length) + token
        ByteBuffer buffer = ByteBuffer.allocate(25 + this.token.length);
        buffer.put((byte) (((this.obfuscationKey & 0x1F) << 3) | 1));
        VarLen.writeInt64(this.expiryTime, buffer);
        VarLen.writeInt32(this.rebaked, buffer);
        VarLen.writeInt64(this.flags, buffer);
        VarLen.writeInt32(this.token.length, buffer);
        buffer.put(this.token);
        buffer.flip();
        byte[] data = new byte[buffer.limit()];
        buffer.get(data);
        return data;
    }

    /**
     * Flags that can be set on a cookie
     */
    public static class Flag
    {
        public final long mask;

        public Flag(long mask)
        {
            this.mask = mask;
        }
    }
    
    private static void xor(byte[] data, byte[] key)
    {
        for (int i = 1; i < data.length; i++)
        {
            data[i] = (byte) (data[i] ^ key[i % key.length]);
        }
    }
    
    public static void main(String[] args)
    {
        for (int c = 0; c < 32; c++)
        {
            System.out.print("{ ");
            SecureRandom sr = new SecureRandom();
            byte[] b = new byte[128];
            sr.nextBytes(b);
            for (int i = 0; i < b.length; i++)
            {
                if (i > 0) System.out.print(", ");
                System.out.print(Byte.toString(b[i]));
            }
            System.out.println(" }, ");
        }
    }
}
